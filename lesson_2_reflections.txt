--What happens when you initialize a repository? Why do you need to do it?
When a repository is initialized a .git repository appears in it with some default
subdirectories. I guess this is needed so that further git operations such as adding
a commit can be performed- there are directories where to add the relevant metadata.
After a git repository is initialized it is also possible to use git status- so 
the contents of the directory has already been 'registered'- git has started tracking them?

--How is the staging area different from the working directory and the repository?
What value do you think it offers?
Staging area is different from the working area in that it only has those files
that are to be commited to the repository in the next commit. It is different from
the repository in that files can be added/taken away. This allows for more flexibility
in choosing what to commit- because all files to be commited are seen in one place
and then can also be modified.

--How can you use the staging area to make sure you have one commit per logical
change?
Only add to staging area from working directory those files that correspond to
single logical change. Staging area allows to select what from all things developer
is working at would be added to a commit. So even if one works on multiple changes
simultaneously only some chosen part of it needs to be commited at one time.

--What are some situations when branches would be helpful in keeping your history
organised? How would branches help?
Branches would help in situations when I would want to explore some alternative
option or maybe develop alternative version of project. Branches would then allow
to develop alternative in parallel and either merge it into main project or leave
as an alternative version.

--How do the diagrams help you visualize the branch structure?
They are helpful in aiding of understanding that commits made on one branch
would be unaccessible from commits made on parallel/earlier-created branches
(unless merged?) as any one commit can only access its parent and this is how
the history is tracked (?).
However, when I print a graph(git log --graph --oneline branch1 branch2) of a
locally created branch I get a list of all commits as if it was a single branch?

--What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
The result is that the branch that is currently checked out(receiver branch) gets
updated with the commits made in the giver branch. So all the commits made in 
giver branch will now be available from the receiver branch. Commits will be 
sorted according to the time of committing. New commit is created at time of
merging which is the new tip of receiver(currently checked out) branch. This 
result effectively means that changes made in giver branch will be incorporated
into the receiver branch with the change history also available.
Representing merge in a diagram allows to show what changes are made and also 
refer to both historical state where the two branches are separate and future
state where a new commit would be made 'on top' of existing ones.
